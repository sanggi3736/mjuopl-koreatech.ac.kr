from ast import If
import threading
import serial
import time
import RPi.GPIO as GPIO



PWMA = 18
PWMB = 23
AIN1 = 22
AIN2 = 27
BIN1 = 25
BIN2 = 24

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(PWMA,GPIO.OUT) #PWMA출력셋업
GPIO.setup(PWMB,GPIO.OUT) #PwMB출력셋업
GPIO.setup(AIN1,GPIO.OUT) #AIN1출력셋업
GPIO.setup(AIN2,GPIO.OUT) #AIN2출력셋업
GPIO.setup(BIN1,GPIO.OUT) #BIN1출력셋업
GPIO.setup(BIN2,GPIO.OUT) #BIN2출력셋업

L_Motor = GPIO.PWM(PWMA,500) #왼쪽모터 셋팅,주파수
R_Motor = GPIO.PWM(PWMB,500) #오른쪽모터 셋팅,주파수
L_Motor.start(0) #듀티 사이클 초기값 셋팅
R_Motor.start(0)

bleSerial = serial.Serial("/dev/ttyS0", baudrate=9600, timeout=1.0)

gData = ""

def go(): #함수 def 함수명은 go
    L_Motor.ChangeDutyCycle(100) #100으로 듀티사이클값 변경
    R_Motor.ChangeDutyCycle(100)
    GPIO.output(AIN1,0)
    GPIO.output(AIN2,1)
    GPIO.output(BIN1,0)
    GPIO.output(BIN2,1) # 직진이므로 왼쪽 오른쪽 출력설정
    
    

def right():#함수 def 함수명은 right
    L_Motor.ChangeDutyCycle(100) #100으로 듀티사이클값 변경
    GPIO.output(AIN1,0)
    GPIO.output(AIN2,1) # 우회전이므로 왼쪽 출력설정
    

def left(): #함수 def 함수명은 left
    R_Motor.ChangeDutyCycle(100) #100으로 듀티사이클값 변경
    GPIO.output(BIN1,0)
    GPIO.output(BIN2,1) #  좌회전이므로 오른쪽 출력설정 
    

def back(): #함수 def 함수명은 back
    L_Motor.ChangeDutyCycle(100) #100으로 듀티사이클값 변경
    R_Motor.ChangeDutyCycle(100)
    GPIO.output(AIN1,1)
    GPIO.output(AIN2,0)
    GPIO.output(BIN1,1)
    GPIO.output(BIN2,0)  # 후진이므로 왼쪽 오른쪽 출력설정
    
def stop(): #함수 def 함수명은 back
    L_Motor.ChangeDutyCycle(0) #100으로 듀티사이클값 변경
    R_Motor.ChangeDutyCycle(0)
    GPIO.output(AIN1,1)
    GPIO.output(AIN2,0)
    GPIO.output(BIN1,1)
    GPIO.output(BIN2,0)  # 후진이므로 왼쪽 오른쪽 출력설정




def serial_thread():
    global gData
    while True:
        data = bleSerial.readline()
        data = data.decode()
        gData = data

def main():
    global gData
    try:
        while True:
            if gData.find("go") >= 0:
                gData = ""
                go()
            elif gData.find("back") >= 0:
                gData = ""
                back()
            elif gData.find("left") >= 0:
                gData = ""
                left()
            elif gData.find("right") >= 0:
                gData = ""
                right()
            elif gData.find("stop") >= 0:
                gData = ""
                stop()


    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    task1 = threading.Thread(target = serial_thread)
    task1.start()
    main()
    bleSerial.close()